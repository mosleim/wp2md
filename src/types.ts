import { DateTime } from "luxon";

export const config =  {
	wizard: true,
	input: 'export.xml',
	output: 'output',
	yearFolders: true,
	monthFolders: true,
	postFolders: false,
	prefixDate: false,
	saveAttachedImages: true,
	saveScrapedImages: true,
	includeOtherTypes: true
};

export interface Export {
    rss: RSS;
}

export type Post ={ 
    data: Item;
    meta:{
        id: string,
        slug: string,
        coverImageId?: string,
        type: PostType,
        imageUrls: string[] // possibly set later in mergeImagesIntoPosts()
        date: string,
    };
    content?: string;
    coverImage?: string, // possibly set later in mergeImagesIntoPosts()
    frontmatter:Record<string, string|string[]|DateTime>;
}

export type PostImage = {
    id: number|string,
    postId: string,
    url: string,
}

export interface RSS {
    $:       RSSClass;
    channel: Channel[];
}

export interface RSSClass {
    version:         string;
    "xmlns:excerpt": string;
    "xmlns:content": string;
    "xmlns:wfw":     string;
    "xmlns:dc":      string;
    "xmlns:wp":      string;
}

export interface Channel {
    title:         string[];
    link:          string[];
    description:   string[];
    pubDate:       string[];
    language:      string[];
    wxr_version:   string[];
    base_site_url: string[];
    base_blog_url: string[];
    author:        Author[];
    category:      ChannelCategory[];
    tag:           Tag[];
    term:          Term[];
    generator:     string[];
    image:         Image[];
    item:          Item[];
}

export interface Author {
    author_id:           string[];
    author_login:        AuthorLogin[];
    author_email:        string[];
    author_display_name: string[];
    author_first_name:   string[];
    author_last_name:    string[];
}

export enum AuthorLogin {
    Agung = "agung",
    Hasan = "hasan",
    Kaptendefri = "kaptendefri",
    Mosleim = "mosleim",
    Nurhayati = "nurhayati",
    Tio = "tio",
}

export interface ChannelCategory {
    term_id:           string[];
    category_nicename: string[];
    category_parent:   string[];
    cat_name:          string[];
    termmeta?:         Meta[];
}

export interface Meta {
    meta_key:   MetaKey[];
    meta_value: string[];
}

export enum MetaKey {
    AkismetAsSubmitted = "akismet_as_submitted",
    AkismetHistory = "akismet_history",
    AkismetResult = "akismet_result",
    CustomizeChangesetUUID = "_customize_changeset_uuid",
    DPOriginal = "_dp_original",
    EditLast = "_edit_last",
    ElementorData = "_elementor_data",
    ElementorEditMode = "_elementor_edit_mode",
    ElementorPageAssets = "_elementor_page_assets",
    ElementorPageSettings = "_elementor_page_settings",
    ElementorProVersion = "_elementor_pro_version",
    ElementorTemplateType = "_elementor_template_type",
    ElementorVersion = "_elementor_version",
    EtAutogeneratedTitle = "_et_autogenerated_title",
    EtBodyLayoutEnabled = "_et_body_layout_enabled",
    EtBodyLayoutID = "_et_body_layout_id",
    EtBuilderDynamicAssetsLoadingAttrThreshold = "_et_builder_dynamic_assets_loading_attr_threshold",
    EtBuilderModuleFeaturesCache = "_et_builder_module_features_cache",
    EtBuilderVersion = "_et_builder_version",
    EtDefault = "_et_default",
    EtDynamicCachedAttributes = "_et_dynamic_cached_attributes",
    EtDynamicCachedShortcodes = "_et_dynamic_cached_shortcodes",
    EtEnabled = "_et_enabled",
    EtEnqueuedPostFonts = "et_enqueued_post_fonts",
    EtFooterLayoutEnabled = "_et_footer_layout_enabled",
    EtFooterLayoutID = "_et_footer_layout_id",
    EtGBContentWidth = "_et_gb_content_width",
    EtHeaderLayoutEnabled = "_et_header_layout_enabled",
    EtHeaderLayoutID = "_et_header_layout_id",
    EtPbAbCurrentShortcode = "_et_pb_ab_current_shortcode",
    EtPbAbSubjects = "_et_pb_ab_subjects",
    EtPbBuiltForPostType = "_et_pb_built_for_post_type",
    EtPbColorPalette = "_et_pb_color_palette",
    EtPbCustomCSS = "_et_pb_custom_css",
    EtPbEnableShortcodeTracking = "_et_pb_enable_shortcode_tracking",
    EtPbExcludedGlobalOptions = "_et_pb_excluded_global_options",
    EtPbFirstImage = "_et_pb_first_image",
    EtPbGutterWidth = "_et_pb_gutter_width",
    EtPbModuleType = "_et_pb_module_type",
    EtPbOldContent = "_et_pb_old_content",
    EtPbPageLayout = "_et_pb_page_layout",
    EtPbPostHideNav = "_et_pb_post_hide_nav",
    EtPbProductPageLayout = "_et_pb_product_page_layout",
    EtPbProjectNav = "_et_pb_project_nav",
    EtPbShowPageCreation = "_et_pb_show_page_creation",
    EtPbShowTitle = "_et_pb_show_title",
    EtPbSideNav = "_et_pb_side_nav",
    EtPbTruncatePost = "_et_pb_truncate_post",
    EtPbTruncatePostDate = "_et_pb_truncate_post_date",
    EtPbUseBuilder = "_et_pb_use_builder",
    EtPostBgColor = "_et_post_bg_color",
    EtPostBgLayout = "_et_post_bg_layout",
    EtThemeBuilderMarkedAsUnused = "_et_theme_builder_marked_as_unused",
    EtUseOn = "_et_use_on",
    EtiOldPostID = "eti_old_post_id",
    EtiOldTermID = "eti_old_term_id",
    EtiRemapped = "eti_remapped",
    EzTocAlttext = "_ez-toc-alttext",
    EzTocDisabled = "_ez-toc-disabled",
    EzTocExclude = "_ez-toc-exclude",
    EzTocHeadingLevels = "_ez-toc-heading-levels",
    EzTocInsert = "_ez-toc-insert",
    Footnotes = "footnotes",
    GlobalColorsInfo = "_global_colors_info",
    MenuItemClasses = "_menu_item_classes",
    MenuItemMenuItemParent = "_menu_item_menu_item_parent",
    MenuItemObject = "_menu_item_object",
    MenuItemObjectID = "_menu_item_object_id",
    MenuItemOrphaned = "_menu_item_orphaned",
    MenuItemTarget = "_menu_item_target",
    MenuItemType = "_menu_item_type",
    MenuItemURL = "_menu_item_url",
    MenuItemXfn = "_menu_item_xfn",
    ShortpixelPreventOptimize = "_shortpixel_prevent_optimize",
    ThumbnailID = "_thumbnail_id",
    WpAttachedFile = "_wp_attached_file",
    WpAttachmentBackupSizes = "_wp_attachment_backup_sizes",
    WpAttachmentContext = "_wp_attachment_context",
    WpAttachmentImageAlt = "_wp_attachment_image_alt",
    WpAttachmentMetadata = "_wp_attachment_metadata",
    WpDesiredPostSlug = "_wp_desired_post_slug",
    WpOldDate = "_wp_old_date",
    WpOldSlug = "_wp_old_slug",
    WpPageTemplate = "_wp_page_template",
    WpTrashMetaStatus = "_wp_trash_meta_status",
    WpTrashMetaTime = "_wp_trash_meta_time",
    YoastWpseoContentScore = "_yoast_wpseo_content_score",
    YoastWpseoEstimatedReadingTimeMinutes = "_yoast_wpseo_estimated-reading-time-minutes",
    YoastWpseoFocuskw = "_yoast_wpseo_focuskw",
    YoastWpseoIsCornerstone = "_yoast_wpseo_is_cornerstone",
    YoastWpseoLinkdex = "_yoast_wpseo_linkdex",
    YoastWpseoMetadesc = "_yoast_wpseo_metadesc",
    YoastWpseoPrimaryCategory = "_yoast_wpseo_primary_category",
    YoastWpseoPrimaryProjectCategory = "_yoast_wpseo_primary_project_category",
    YoastWpseoTitle = "_yoast_wpseo_title",
    YoastWpseoWordproofTimestamp = "_yoast_wpseo_wordproof_timestamp",
}

export interface Image {
    url:    string[];
    title:  string[];
    link:   string[];
    width:  string[];
    height: string[];
}

export interface Item {
    title:             string[];
    link:              string[];
    pubDate:           string[];
    creator:           AuthorLogin[];
    guid:              GUIDElement[];
    description:       string[];
    encoded:           string[];
    post_id:           string[];
    post_date:         Date[];
    post_date_gmt:     Array<Date | PostDateGmtEnum>;
    post_modified:     Date[];
    post_modified_gmt: Array<Date | PostDateGmtEnum>;
    comment_status:    Status[];
    ping_status:       Status[];
    post_name:         string[];
    status:            StatusElement[];
    post_parent:       string[];
    menu_order:        string[];
    post_type:         PostType[];
    post_password:     string[];
    is_sticky:         string[];
    attachment_url?:   string[];
    postmeta?:         Meta[];
    category?:         ItemCategory[];
    comment?:          Comment[];
}

export interface ItemCategory {
    _: string;
    $: Category;
}

export interface Category {
    domain:   TermTaxonomy;
    nicename: string;
}

export enum TermTaxonomy {
    Category = "category",
    LayoutType = "layout_type",
    ModuleWidth = "module_width",
    NavMenu = "nav_menu",
    PostTag = "post_tag",
    ProjectCategory = "project_category",
    Scope = "scope",
    WpTheme = "wp_theme",
}

export interface Comment {
    comment_id:           string[];
    comment_author:       string[];
    comment_author_email: string[];
    comment_author_url:   string[];
    comment_author_IP:    string[];
    comment_date:         Date[];
    comment_date_gmt:     Date[];
    comment_content:      string[];
    comment_approved:     string[];
    comment_type:         CommentType[];
    comment_parent:       string[];
    comment_user_id:      string[];
    commentmeta:          Meta[];
}

export type CommentType = "comment"

export type Status = "closed" | "" | "open";

export interface GUIDElement {
    _: string;
    $: GUID;
}

export interface GUID {
    isPermaLink: string;
}

export enum PostDateGmtEnum {
    The00000000000000 = "0000-00-00 00:00:00",
}

export type PostType =
        "attachment"|
        "custom_css"|
        "et_body_layout"|
        "et_footer_layout"|
        "et_header_layout"|
        "et_pb_layout"|
        "et_template"|
        "nav_menu_item"|
        "page"|
        "post"|
        "project"|
        "wp_global_styles";

export type StatusElement = "draft" | "inherit" | "publish" | "trash";

export interface Tag {
    term_id:  string[];
    tag_slug: string[];
    tag_name: string[];
}

export interface Term {
    term_id:           string[];
    term_taxonomy:     TermTaxonomy[];
    term_slug:         string[];
    term_parent?:      string[];
    term_name:         string[];
    term_description?: string[];
    termmeta?:         Meta[];
}
